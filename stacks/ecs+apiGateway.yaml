AWSTemplateFormatVersion: "2010-09-09"

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    ApiBasePath:
        Type: String
    VpcId:
        Type: AWS::EC2::VPC::Id
        Description: Id of VPC for EC2
    SubnetIdList:
        Type: List<AWS::EC2::Subnet::Id>
        Description: VPC subnets list
    AuthorizerFunction:
        Type: String
    MinContainers:
        Type: Number
        Description: Min containers to scale to
        Default: 1
    MaxContainers:
        Type: Number
        Description: Max containers to scale to
        Default: 1
    ScaleOutCooldown:
        Type: Number
        Description: Scaling down policy cool down in seconds
    ScaleInCooldown:
        Type: Number
        Description: Scaling up policy cool down in seconds
    CPUUtilization:
        Type: String
        Description: Memory of cpu to uses in autoscaling
    HasPrivateSubnet:
        Type: String
        AllowedValues:
          - true
          - false
        Default: false
    Image:
        Type: String
        Description: ECR Image
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug

Conditions:
    IsPrivateSubnet: !Equals [!Ref HasPrivateSubnet, true]
    isProd: !Equals [!Ref Stage, prod]

Resources:
    # -----------------------------------------------
    # API 
    # -----------------------------------------------
    Integration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref Api
            IntegrationType: HTTP_PROXY
            IntegrationMethod: ANY
            IntegrationUri: !If
              - IsPrivateSubnet
              - !Ref ListenerHTTPS
              - !Sub http://${LoadBalancer.DNSName}
            ConnectionType: !If
              - IsPrivateSubnet
              - VPC_LINK
              - INTERNET
            ConnectionId: !If
              - IsPrivateSubnet
              - Fn::ImportValue: !Sub ${Stage}-${Tenant}-vpc-link-id
              - !Ref AWS::NoValue
            PayloadFormatVersion: "1.0"
            RequestParameters:
                overwrite:path: '$request.path'

    Route:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: $default
            Target: !Sub integrations/${Integration}
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref Authorizer

    RouteOptions:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: OPTIONS /{proxy+}
            Target: !Sub integrations/${Integration}
            AuthorizationType: NONE

    Api:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-api
            ProtocolType: HTTP
            CorsConfiguration:
                AllowCredentials: false
                AllowHeaders:
                  - '*'
                AllowMethods:
                  - '*'
                AllowOrigins:
                  - '*'
                ExposeHeaders:
                  - '*'
                MaxAge: 0
            Tags:
                Service: ApiGatewayV2
                Resource: Api
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-api
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant

    ApiMapping:
        Type: AWS::ApiGatewayV2::ApiMapping
        Properties:
            ApiId: !Ref Api
            ApiMappingKey: !Ref ApiBasePath
            DomainName:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-api-gateway-domain-name
            Stage: !Ref ApiStage

    ApiDeployment:
        DependsOn: Route
        Type: AWS::ApiGatewayV2::Deployment
        Properties:
            ApiId: !Ref Api

    ApiStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            ApiId: !Ref Api
            DeploymentId: !Ref ApiDeployment
            StageName: !Ref Stage
            Tags:
              - Key: Service
                Value: ApiGatewayV2
              - Key: Resource
                Value: Stage
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-api-stage
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    Authorizer:
        Type: AWS::ApiGatewayV2::Authorizer
        Properties:
            Name: LambdaAuthorizer
            ApiId: !Ref Api
            AuthorizerType: REQUEST
            AuthorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AuthorizerFunction}/invocations
            AuthorizerPayloadFormatVersion: '2.0'
            AuthorizerResultTtlInSeconds: 0
            IdentitySource:
              - $request.header.Authorization


    LambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: authorizer
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/authorizers/${Authorizer}

    # -----------------------------------------------
    # Cluster
    # -----------------------------------------------
    Cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Sub ${Stage}-${Tenant}-${Microservice}-cluster
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: Cluster
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-cluster
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # ---------------------------------------------
    # LOAD BALANCER
    # ---------------------------------------------
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-alb
            LoadBalancerAttributes:
              - Key: idle_timeout.timeout_seconds
                Value: '60'
            Scheme: !If
              - IsPrivateSubnet
              - internal
              - internet-facing
            SecurityGroups:
              - !Ref LBSecurityGroup
            Subnets: !Ref SubnetIdList
            Tags:
              - Key: Service
                Value: ElasticLoadBalancingV2
              - Key: Resource
                Value: LoadBalancer
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-alb
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to client host
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            Tags:
              - Key: Service
                Value: VPC
              - Key: Resource
                Value: SecurityGroup
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-alb-sg
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    ListenerHTTPS:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
              - TargetGroupArn: !Ref TargetGroup
                Type: forward
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-alb-tg
            HealthCheckPath: "/health-check"
            Port: 80
            Protocol: HTTP
            TargetGroupAttributes:
              - Key: deregistration_delay.timeout_seconds
                Value: '60' # default is 300
            TargetType: ip
            VpcId: !Ref VpcId
            Tags:
              - Key: Service
                Value: ElasticLoadBalancingV2
              - Key: Resource
                Value: TargetGroup
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-alb-tg
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # ---------------------------------------------
    # FARGATE
    # ---------------------------------------------
    TaskRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-task-role
            AssumeRolePolicyDocument:
                Statement:
                  - Effect: Allow
                    Principal:
                        Service: "ecs-tasks.amazonaws.com"
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: task-policy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - ssm:GetParameter
                          - secretsmanager:GetSecretValue
                          - sqs:ReceiveMessage
                          - sqs:SendMessage
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-task-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    ExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-execution-role
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - ec2.amazonaws.com
                          - ecs.amazonaws.com
                          - ecs-tasks.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            Path: /
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
              - arn:aws:iam::aws:policy/AmazonECS_FullAccess
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-execution-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant


    # ---------------------------------------------
    # FARGATE
    # ---------------------------------------------

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: !If
              - isProd
              - !Ref AWS::NoValue
              - 7
            LogGroupName: !Sub /aws/ecs/services/${Stage}-${Tenant}-${Microservice}
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/ecs/services/${Stage}-${Tenant}-${Microservice}
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            ContainerDefinitions:
              - Name: !Sub ${Stage}-${Tenant}-${Microservice}-http
                PortMappings:
                  - ContainerPort: 80
                Environment:
                  - Name: ACCOUNT_ID
                    Value: !Ref AWS::AccountId
                  - Name: STAGE
                    Value: !Ref Stage
                  - Name: REGION
                    Value: !Ref AWS::Region
                  - Name: TENANT
                    Value: !Ref Tenant
                  - Name: LOG_LEVEL
                    Value: !Ref LogLevel
                  - Name: MICROSERVICE
                    Value: !Ref Microservice
                  - Name: DOCUMENT_SECRET
                    Value:
                        Fn::ImportValue: !Sub ${Stage}-${Tenant}-${Microservice}-document-db-secret
                  - Name: DOCUMENT_PARAMS
                    Value:
                        Fn::ImportValue: !Sub ${Stage}-${Tenant}-${Microservice}-document-db-parameter
                Image: !Ref Image
                LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref LogGroup
                        awslogs-stream-prefix: !Sub ${Stage}-${Tenant}-${Microservice}-http
                        awslogs-region: !Ref AWS::Region
                Essential: true
            Cpu: 256
            Memory: 512
            ExecutionRoleArn: !GetAtt ExecutionRole.Arn
            TaskRoleArn: !GetAtt TaskRole.Arn
            NetworkMode: awsvpc
            RequiresCompatibilities:
              - FARGATE
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: TaskDefinition
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-http
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    ServiceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http from load balancer
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                SourceSecurityGroupId: !Ref LBSecurityGroup
            Tags:
              - Key: Service
                Value: VPC
              - Key: Resource
                Value: SecurityGroup
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-service-sg
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerHTTPS
        Properties:
            Cluster: !Ref Cluster
            DesiredCount: !Ref MinContainers
            LaunchType: FARGATE
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
              - ContainerName: task
                ContainerPort: 80
                TargetGroupArn: !Ref TargetGroup
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: !If
                      - IsPrivateSubnet
                      - DISABLED
                      - ENABLED
                    SecurityGroups:
                      - !Ref ServiceSecurityGroup
                    Subnets: !Ref SubnetIdList
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: Service
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-http
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # -----------------------------------------------------------
    #  AUTO SCALING
    # -----------------------------------------------------------

    AutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - ecs-tasks.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
            Path: "/"
            Policies:
              - PolicyName: root
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - ecs:DescribeServices
                          - ecs:UpdateService
                          - cloudwatch:DeleteAlarms
                          - cloudwatch:DescribeAlarms
                          - cloudwatch:PutMetricAlarm
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    AutoScalingTarget:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Properties:
            MinCapacity: !Ref MinContainers
            MaxCapacity: !Ref MaxContainers
            ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs
            RoleARN: !GetAtt AutoScalingRole.Arn

    AutoScalingPolicy:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-policy
            PolicyType: TargetTrackingScaling
            ScalingTargetId: !Ref AutoScalingTarget
            TargetTrackingScalingPolicyConfiguration:
                PredefinedMetricSpecification:
                    PredefinedMetricType: ECSServiceAverageCPUUtilization
                ScaleInCooldown: !Ref ScaleInCooldown
                ScaleOutCooldown: !Ref ScaleOutCooldown
                TargetValue: !Ref CPUUtilization

