AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug
    SecurityGroupIdList:
        Type: List<AWS::EC2::SecurityGroup::Id>
    SubnetIdsList:
        Type: List<AWS::EC2::Subnet::Id>

Globals:
    Function:
        Timeout: 900
        Runtime: nodejs20.x
        Environment:
            Variables:
                STAGE: !Ref Stage
                TENANT: !Ref Tenant
                REGION: !Ref AWS::Region
                ACCOUNT_NUMBER: !Ref AWS::AccountId
                MICROSERVICE: !Ref Microservice
                DOCUMENT_SECRET:
                    Fn::ImportValue: !Sub ${Stage}-${Tenant}-${Microservice}-document-db-secret
                DOCUMENT_PARAMS:
                    Fn::ImportValue: !Sub ${Stage}-${Tenant}-${Microservice}-document-db-parameter

Resources:
    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-lambda-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service:
                          - "lambda.amazonaws.com"
                          - "events.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
              - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
            Policies:
              - PolicyName: !Sub ${Stage}-${Tenant}-${Microservice}
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - lambda:PublishVersion
                          - lambda:InvokeFunction
                          - apigateway:*
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-lambda-role
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    # AUTHORIZER
    Lambda:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Stage}-${Tenant}-${Microservice}-lambda
            Role: !GetAtt LambdaRole.Arn
            CodeUri: ./../dist/handler
            Handler: lambda.entryPoint
            VpcConfig:
                SubnetIds: !Ref SubnetIdsList
                SecurityGroupIds: !Ref SecurityGroupIdList
            Tags:
                Service: Serverless
                Resource: Function
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-lambda
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant
            Environment:
                Variables:
                    LOG_LEVEL: !Ref LogLevel
            Events:
                SQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SQS.Arn
                        BatchSize: 1
            Tracing: PassThrough

    LambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /aws/lambda/${Lambda}
            RetentionInDays: 1
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/lambda/${Stage}-${Tenant}-${Microservice}
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SQS:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-sqs
            DelaySeconds: 0
            VisibilityTimeout: 900
            ReceiveMessageWaitTimeSeconds: 1
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt DLQ.Arn
                maxReceiveCount: 5
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-sqs
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice


    DLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-dlq
            DelaySeconds: 0
            VisibilityTimeout: 900
            ReceiveMessageWaitTimeSeconds: 1
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-dlq
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    QueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            Queues:
              - !Ref SQS
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Sid: allow-sns-messages
                    Effect: Allow
                    Action:
                      - sqs:SendMessage
                    Principal:
                        Service:
                          - "sns.amazonaws.com"
                    Resource: !GetAtt SQS.Arn
                    Condition:
                        ArnEquals:
                            aws:SourceArn:
                                Fn::ImportValue: !Sub ${Stage}-${Tenant}-event-bus

    QueueSNSSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
            TopicArn:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-event-bus
            Endpoint: !GetAtt SQS.Arn
            Protocol: sqs
            FilterPolicy: '{"type": [""], "status": [""], "event": [""]}'
