AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::LanguageExtensions

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug
    MinContainers:
        Type: Number
        Description: Min containers to scale to
        Default: 1
    MaxContainers:
        Type: Number
        Description: Max containers to scale to
        Default: 1
    ScaleOutCooldown:
        Type: Number
        Description: Scaling down policy cool down in seconds
    ScaleInCooldown:
        Type: Number
        Description: Scaling up policy cool down in seconds
    CPUUtilization:
        Type: String
        Description: Use of cpu to auto scale
    TargetGroupArn:
        Type: String
        Description: Target Group Arn
    ImageTag: 
        Type: String
        Default: latest
    

Conditions:
    isProd: !Equals [!Ref Stage, prod]

Resources:                        
    # -----------------------------------------------
    # Cluster
    # -----------------------------------------------
    Cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Sub ${Stage}-${Tenant}-${Microservice}-cluster
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: Cluster
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-cluster
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # ---------------------------------------------
    # FARGATE
    # ---------------------------------------------
    TaskRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-task-role
            AssumeRolePolicyDocument:
                Statement:
                  - Effect: Allow
                    Principal:
                        Service: "ecs-tasks.amazonaws.com"
                    Action: "sts:AssumeRole"
            Policies:
              - PolicyName: task-policy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - ssm:GetParameter
                          - secretsmanager:GetSecretValue
                          - sqs:ReceiveMessage
                          - sqs:SendMessage
                          - s3:GetObject
                          - s3:PutObject
                          - s3:DeleteObject
                          - sns:Publish
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-task-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    ExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-execution-role
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - ec2.amazonaws.com
                          - ecs.amazonaws.com
                          - ecs-tasks.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            Path: /
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
              - arn:aws:iam::aws:policy/AmazonECS_FullAccess
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-execution-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant


    # ---------------------------------------------
    # FARGATE
    # ---------------------------------------------

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: !If
              - isProd
              - !Ref AWS::NoValue
              - 7
            LogGroupName: !Sub /aws/ecs/services/${Stage}-${Tenant}-${Microservice}
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/ecs/services/${Stage}-${Tenant}-${Microservice}
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Sub ${Stage}-${Tenant}-${Microservice}
            ContainerDefinitions:
              - Name: !Sub ${Stage}-${Tenant}-${Microservice}-http
                PortMappings:
                  - ContainerPort: 80
                Environment:
                  - Name: ACCOUNT_ID
                    Value: !Ref AWS::AccountId
                  - Name: STAGE
                    Value: !Ref Stage
                  - Name: REGION
                    Value: !Ref AWS::Region
                  - Name: TENANT
                    Value: !Ref Tenant
                  - Name: PORT
                    Value: 80
                  - Name: LOG_LEVEL
                    Value: !Ref LogLevel
                  - Name: MICROSERVICE
                    Value: !Ref Microservice
                  - Name: RDS_SECRET
                    Value: !Sub ${Stage}-${Tenant}-rds
                  - Name: RDS_PARAMS
                    Value: !Sub ${Stage}-${Tenant}-rds
                  - Name: EVENT_BUS
                    Value: { "Fn::ImportValue": !Sub "${Stage}-${Tenant}-event-bus" }
                Image: !Sub 
                  - "${uri}:${tag}"
                  - uri: {"Fn::ImportValue": !Sub "${Stage}-${Tenant}-${Microservice}-ecr-repository-uri"}
                    tag: !Ref ImageTag
                LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref LogGroup
                        awslogs-stream-prefix: container
                        awslogs-region: !Ref AWS::Region
                Essential: true
              - Name: envoy
                Image: public.ecr.aws/appmesh/aws-appmesh-envoy:v1.15.1.0-prod
                Essential: true
                Environment:
                  - Name: APPMESH_VIRTUAL_NODE_NAME
                    Value: !Sub
                      - "mesh/${AppMeshName}/virtualNode/${VirtualNodeName}"
                      - AppMeshName: {'Fn::ImportValue': !Sub '${Stage}-${Tenant}-app-mesh-name'}
                        VirtualNodeName: !Ref Microservice
                  - Name: AWS_REGION
                    Value: !Ref AWS::Region
                User: 1337
                PortMappings:
                  - ContainerPort: 9901
                    Protocol: tcp
            Cpu: 256
            Memory: 512
            ExecutionRoleArn: !GetAtt ExecutionRole.Arn
            TaskRoleArn: !GetAtt TaskRole.Arn
            NetworkMode: awsvpc
            RequiresCompatibilities:
              - FARGATE
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: TaskDefinition
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-http
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant


    Service:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref Cluster
            ServiceName: !Sub ${Stage}-${Tenant}-${Microservice}-http
            DesiredCount: !Ref MinContainers
            LaunchType: FARGATE
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
              - ContainerName: !Sub ${Stage}-${Tenant}-${Microservice}-http
                ContainerPort: 80
                TargetGroupArn: !Ref TargetGroupArn
            ServiceRegistries:
              - ContainerName: !Sub ${Stage}-${Tenant}-${Microservice}-http
                RegistryArn: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-${Microservice}-cloud-map-service-arn"}
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: DISABLED
                    SecurityGroups:
                      - Fn::ImportValue: !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"
                    Subnets: !Split [',', {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnets-list"}]
            Tags:
              - Key: Service
                Value: ECS
              - Key: Resource
                Value: Service
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-http
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # -----------------------------------------------------------
    #  AUTO SCALING
    # -----------------------------------------------------------

    AutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - ecs-tasks.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
            Path: "/"
            Policies:
              - PolicyName: root
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - ecs:DescribeServices
                          - ecs:UpdateService
                          - cloudwatch:DeleteAlarms
                          - cloudwatch:DescribeAlarms
                          - cloudwatch:PutMetricAlarm
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-role
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    AutoScalingTarget:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Properties:
            MinCapacity: !Ref MinContainers
            MaxCapacity: !Ref MaxContainers
            ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs
            RoleARN: !GetAtt AutoScalingRole.Arn

    AutoScalingPolicy:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Sub ${Stage}-${Tenant}-${Microservice}-auto-scaling-policy
            PolicyType: TargetTrackingScaling
            ScalingTargetId: !Ref AutoScalingTarget
            TargetTrackingScalingPolicyConfiguration:
                PredefinedMetricSpecification:
                    PredefinedMetricType: ECSServiceAverageCPUUtilization
                ScaleInCooldown: !Ref ScaleInCooldown
                ScaleOutCooldown: !Ref ScaleOutCooldown
                TargetValue: !Ref CPUUtilization

